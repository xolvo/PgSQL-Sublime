{
    "scope": "source.sql, source.pgsql",
    "completions":
    [
        "ALL",
        "AND",
        "ANY",
        "ARRAY",
        "AS",
        "DELETE",
        "DISTINCT",
        "DOCUMENT",
        "EXISTS",
        "FALSE",
        "FROM",
        "IN",
        "IS",
        "LIKE",
        "NOT",
        "NULL",
        "OR",
        "RECORD",
        "ROW",
        "SELECT",
        "SIMILAR TO",
        "SOME",
        "THEN",
        "TRUE",
        "UNKNOWN",
        "UPDATE",
        "WHERE",
        { "trigger": "all", "contents": "ALL" },
        { "trigger": "and", "contents": "AND" },
        { "trigger": "any", "contents": "ANY" },
        { "trigger": "array", "contents": "ARRAY" },
        { "trigger": "as", "contents": "AS" },
        { "trigger": "delete", "contents": "DELETE" },
        { "trigger": "distinct", "contents": "DISTINCT" },
        { "trigger": "document", "contents": "DOCUMENT" },
        { "trigger": "exists", "contents": "EXISTS" },
        { "trigger": "false", "contents": "FALSE" },
        { "trigger": "from", "contents": "FROM" },
        { "trigger": "in", "contents": "IN" },
        { "trigger": "is", "contents": "IS" },
        { "trigger": "like", "contents": "LIKE" },
        { "trigger": "not", "contents": "NOT" },
        { "trigger": "null", "contents": "NULL" },
        { "trigger": "or", "contents": "OR" },
        { "trigger": "record", "contents": "RECORD" },
        { "trigger": "row", "contents": "ROW" },
        { "trigger": "select", "contents": "SELECT" },
        { "trigger": "similar to", "contents": "SIMILAR TO" },
        { "trigger": "some", "contents": "SOME" },
        { "trigger": "then", "contents": "THEN" },
        { "trigger": "true", "contents": "TRUE" },
        { "trigger": "unknown", "contents": "UNKNOWN" },
        { "trigger": "update", "contents": "UPDATE" },
        { "trigger": "where", "contents": "WHERE" },
        "ABORT",
        { "trigger": "abort", "contents": "ABORT" },
        "BEGIN",
        { "trigger": "begin", "contents": "BEGIN" },
        "COMMIT",
        { "trigger": "commit", "contents": "COMMIT" },
// partials
        { "trigger": "SELECT * FROM schema.table AS t", "contents": "SELECT ${1:*} FROM ${2:schema}.${3:table} AS ${4:t}" },
        { "trigger": "select * from schema.table as t", "contents": "SELECT ${1:*} FROM ${2:schema}.${3:table} AS ${4:t}" },
        { "trigger": "WITH t AS (...)", "contents": "WITH ${1:t} AS ($2)" },
        { "trigger": "with t as (...)", "contents": "WITH ${1:t} AS ($2)" },

        { "trigger": "JOIN schema.table AS t ON (a.id=t.id)", "contents": "JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "LEFT JOIN schema.table AS t ON (a.id=t.id)", "contents": "LEFT JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "RIGHT JOIN schema.table AS t ON (a.id=t.id)", "contents": "RIGHT JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "FULL JOIN schema.table AS t ON (a.id=t.id)", "contents": "FULL JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "CROSS JOIN schema.table AS t", "contents": "CROSS JOIN ${1:schema}.${2:table} AS ${3:t} " },
        { "trigger": "join schema.table as t on (a.id=t.id)", "contents": "JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "left join schema.table as t on (a.id=t.id)", "contents": "LEFT JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "right join schema.table as t on (a.id=t.id)", "contents": "RIGHT JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "Full join schema.table as t on (a.id=t.id)", "contents": "FULL JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " },
        { "trigger": "cross join schema.table as t", "contents": "CROSS JOIN ${1:schema}.${2:table} AS ${3:t} " },

        { "trigger": "", "contents": "" },

        { "trigger": "", "contents": "" },

        { "trigger": "", "contents": "" },
// Conditional Expressions
        { "trigger": "coalesce(value, ...)", "contents": "COALESCE(${1:value}, ${2:value})" },
        { "trigger": "COALESCE(value, ...)", "contents": "COALESCE(${1:value}, ${2:value})" },
        { "trigger": "nullif(value1, value2)", "contents": "NULLIF(${1:value1}, ${2:value2})" },
        { "trigger": "NULLIF(value1, value2)", "contents": "NULLIF(${1:value1}, ${2:value2})" },
        { "trigger": "greatest(value, ...)", "contents": "GREATEST(${1:value}, ${2:value})" },
        { "trigger": "GREATEST(value, ...)", "contents": "GREATEST(${1:value}, ${2:value})" },
        { "trigger": "least(value, ...)", "contents": "LEAST(${1:value}, ${2:value})" },
        { "trigger": "LEAST(value, ...)", "contents": "LEAST(${1:value}, ${2:value})" },
// Mathematical Functions
        { "trigger": "abs(x)", "contents": "abs(${1:anynumeric})" },
        { "trigger": "cbrt(x)", "contents": "cbtr(${1:double})" },
        { "trigger": "ceil(x)", "contents": "ceil(${1:numeric})" },
        { "trigger": "ceiling(x)", "contents": "ceiling(${1:numeric})" },
        { "trigger": "degrees(x)", "contents": "degrees(${1:double})" },
        { "trigger": "div(num, den)", "contents": "div(${1:numerator}, ${2:denominator})" },
        { "trigger": "exp(x)", "contents": "exp(${1:numeric})" },
        { "trigger": "floor(x)", "contents": "floor(${1:numeric})" },
        { "trigger": "ln(x)", "contents": "ln(${1:numeric})" },
        { "trigger": "log(x)", "contents": "log(${1:numeric})" },
        { "trigger": "log(base, x)", "contents": "log(${1:base}, ${2:numeric})" },
        { "trigger": "mod(num, den)", "contents": "mod(${1:numerator}, ${2:denominator})" },
        "pi()",
        { "trigger": "power(x, exp)", "contents": "power(${1:numeric}, ${2:exponent})" },
        { "trigger": "radians(x)", "contents": "radians(${1:degrees})" },
        "random()",
        { "trigger": "round(x)", "contents": "round(${1:numeric})" },
        { "trigger": "round(x, places)", "contents": "round(${1:numeric}, ${2:places})" },
        { "trigger": "setseed(x)", "contents": "setseed(${1:double})" },
        { "trigger": "sign(x)", "contents": "sign(${1:numeric})" },
        { "trigger": "sqrt(x)", "contents": "sqrt(${1:numeric})" },
        { "trigger": "trunc(x)", "contents": "trunc(${1:numeric})" },
        { "trigger": "trunc(x, places)", "contents": "trunc(${1:numeric}, ${2:places})" },
        { "trigger": "width_bucket(op, b1, b2, count)", "contents": "width_bucket(${1:operand}, ${2:b1}, ${3:b2}, ${4:count})" },
// Trigonometric Functions
        { "trigger": "acos(x)", "contents": "acos(${1:double})" },
        { "trigger": "asin(x)", "contents": "asin(${1:double})" },
        { "trigger": "atan(x)", "contents": "atan(${1:double})" },
        { "trigger": "atan2(y, x)", "contents": "atan2(${1:double}, ${2:double})" },
        { "trigger": "cos(x)", "contents": "cos(${1:radians})" },
        { "trigger": "cot(x)", "contents": "cot(${1:radians})" },
        { "trigger": "sin(x)", "contents": "sin(${1:radians})" },
        { "trigger": "tan(x)", "contents": "tan(${1:radians})" },
// String Functions
        { "trigger": "bit_length(string)", "contents": "bit_length(${1:string})" },
        { "trigger": "char_length(string)", "contents": "char_length(${1:string})" },
        { "trigger": "character_length(string)", "contents": "character_length(${1:string})" },
        { "trigger": "lower(string)", "contents": "lower(${1:string})" },
        { "trigger": "octet_length(string)", "contents": "octet_length(${1:string})" },
        { "trigger": "overlay(string placing string from start)", "contents": "overlay(${1:string} placing ${2:string}) from ${3:start}" },
        { "trigger": "overlay(string placing string from start for len)", "contents": "overlay(${1:string} placing ${2:string}) from ${3:start} for ${4:length}" },
        { "trigger": "position(needle, haystack)", "contents": "position(${1:needle} in ${2:haystack})" },
        { "trigger": "substring(string from start)", "contents": "substring(${1:string} from ${2:start})" },
        { "trigger": "substring(string from start for len)", "contents": "substring(${1:string} from ${2:start} for ${3:length})" },
        { "trigger": "substring(string from pattern)", "contents": "substring(${1:string} from ${2:pattern})" },
        { "trigger": "substring(string from pattern for escape)", "contents": "substring(${1:string} from ${2:pattern} for ${3:escape})" },
        { "trigger": "trim(from string)", "contents": "trim(from ${1:string})" },
        { "trigger": "trim(lead|trail|both from string)", "contents": "trim(${1:leading|trailing|both} from ${2:string})" },
        { "trigger": "trim(chars from string)", "contents": "trim(${1:leading|trailing|both} from ${2:string})" },
        { "trigger": "trim(lead|trail|both chars from string)", "contents": "trim(${1:leading|trailing|both} ${2:characters} from ${3:string})" },
        { "trigger": "upper(string)", "contents": "upper(${1:string})" },
// Other String Functions
        { "trigger": "ascii(string)", "contents": "ascii(${1:string})" },
        "AT TIME ZONE",
        { "trigger": "btrim(string)", "contents": "btrim(${1:string})" },
        { "trigger": "btrim(string, chars)", "contents": "btrim(${1:string}, ${2:characters})" },
        { "trigger": "chr(code)", "contents": "chr(${1:code})" },
        { "trigger": "concat(string, ...)", "contents": "concat(${1:string}, ${2:string})" },
        { "trigger": "convert(string, from, to)", "contents": "convert(${1:string}, ${2:encoding-from}, ${3:encoding-to})" },
        { "trigger": "convert_from(string, from)", "contents": "convert_from(${1:string}, ${2:encoding-from})" },
        { "trigger": "convert_to(string, to)", "contents": "convert_to(${1:string}, ${2:encoding-to})" },
        { "trigger": "decode(string, format)", "contents": "decode(${1:string}, ${2:format})" },
        { "trigger": "encode(string, format)", "contents": "encode(${1:string}, ${2:format})" },
        { "trigger": "format(format, ...)", "contents": "format(${1:formatstring}, ${2:any})" },
        { "trigger": "initcap(string)", "contents": "initcap(${1:string})" },
        { "trigger": "left(string, len)", "contents": "left(${1:string}, ${2:length})" },
        { "trigger": "length(string)", "contents": "length(${1:string})" },
        { "trigger": "length(string, encoding)", "contents": "length(${1:string}, ${2:encoding})" },
        { "trigger": "lpad(string, len)", "contents": "lpad(${1:string}, ${2:length})" },
        { "trigger": "lpad(string, len, fill)", "contents": "lpad(${1:string}, ${2:length}, ${3:fill})" },
        { "trigger": "ltrim(string)", "contents": "ltrim(${1:string})" },
        { "trigger": "ltrim(string, chars)", "contents": "ltrim(${1:string}, ${2:characters})" },
        { "trigger": "md5(string)", "contents": "md5(${1:string})" },
        "pg_client_encoding()",
        { "trigger": "quote_ident(string)", "contents": "quote_ident(${1:string})" },
        { "trigger": "quote_literal(any)", "contents": "quote_literal(${1:any})" },
        { "trigger": "quote_nullable(any)", "contents": "quote_nullable(${1:any})" },
        { "trigger": "regexp_matches(string, pattern)", "contents": "regexp_matches(${1:string}, ${2:pattern})" },
        { "trigger": "regexp_matches(string, pattern, flags)", "contents": "regexp_matches(${1:string}, ${2:pattern}, ${3:flags})" },
        { "trigger": "regexp_replace(string, pattern, replacement)", "contents": "regexp_replace(${1:string}, ${2:pattern}, ${3:replacement})" },
        { "trigger": "regexp_replace(string, pattern, replacement, flags)", "contents": "regexp_replace(${1:string}, ${2:pattern}, ${3:replacement}, ${4:flags})" },
        { "trigger": "regexp_split_to_array(string, pattern)", "contents": "regexp_split_to_array(${1:string}, ${2:pattern})" },
        { "trigger": "regexp_split_to_array(string, pattern, flags)", "contents": "regexp_split_to_array(${1:string}, ${2:pattern}, ${3:flags})" },
        { "trigger": "regexp_split_to_table(string, pattern)", "contents": "regexp_split_to_table(${1:string}, ${2:pattern})" },
        { "trigger": "regexp_split_to_table(string, pattern, flags)", "contents": "regexp_split_to_table(${1:string}, ${2:pattern}, ${3:flags})" },
        { "trigger": "repeat(string, count)", "contents": "repeat(${1:string}, ${2:count})" },
        { "trigger": "replace(string, from, to)", "contents": "replace(${1:string}, ${2:from}, ${3:to})" },
        { "trigger": "reverse(string)", "contents": "reverse(${1:string})" },
        { "trigger": "right(string, len)", "contents": "right(${1:string}, ${2:length})" },
        { "trigger": "rpad(string, len)", "contents": "rpad(${1:string}, ${2:length})" },
        { "trigger": "rpad(string, len, fill)", "contents": "rpad(${1:string}, ${2:length}, ${3:fill})" },
        { "trigger": "rtrim(string)", "contents": "rtrim(${1:string})" },
        { "trigger": "rtrim(string, chars)", "contents": "rtrim(${1:string}, ${2:characters})" },
        { "trigger": "split_part(string, delimiter, field)", "contents": "split_part(${1:string}, ${2:delimiter}, ${3:field})" },
        { "trigger": "strpos(string, substring)", "contents": "strpos(${1:string}, ${2:substring})" },
        { "trigger": "substr(string, from)", "contents": "substr(${1:string}, ${2:from})" },
        { "trigger": "substr(string, from, count)", "contents": "substr(${1:string}, ${2:from}, ${3:count})" },
        { "trigger": "to_ascii(string)", "contents": "to_ascii(${1:string})" },
        { "trigger": "to_ascii(string, encoding)", "contents": "to_ascii(${1:string}, ${2:encoding})" },
        { "trigger": "to_hex(integer)", "contents": "to_hex(${1:integer})" },
        { "trigger": "translate(string, from, to)", "contents": "translate(${1:string}, ${2:from}, ${3:to})" },
// Other Binary String Functions
        { "trigger": "get_bit(string, offset)", "contents": "get_bit(${1:string}, ${2:offset})" },
        { "trigger": "get_byte(string, offset)", "contents": "get_byte(${1:string}, ${2:offset})" },
        { "trigger": "set_bit(string, offset, newvalue)", "contents": "set_bit(${1:string}, ${2:offset}, ${3:newvalue})" },
        { "trigger": "set_byte(string, offset, newvalue)", "contents": "set_byte(${1:string}, ${2:offset}, ${3:newvalue})" },
// Data Type Formatting Functions
        { "trigger": "to_char(value, format)", "contents": "to_char(${1:value}, ${2:format})" },
        { "trigger": "to_date(value, format)", "contents": "to_date(${1:value}, ${2:format})" },
        { "trigger": "to_number(value, format)", "contents": "to_number(${1:value}, ${2:format})" },
        { "trigger": "to_timestamp(value, format)", "contents": "to_timestamp(${1:value}, ${2:format})" },
        { "trigger": "to_timestamp(double)", "contents": "to_timestamp(${1:double})" },
// Date/Time Functions
        { "trigger": "age(timestamp)", "contents": "age(${1:start})" },
        { "trigger": "age(timestamp, timestamp)", "contents": "age(${1:start}, ${2:end})" },
        "clock_timestamp()",
        "CURRENT_DATE",
        "CURRENT_TIME",
        { "trigger": "current_time(precision)", "contents": "current_time(${1:precision})" },
        "CURRENT_TIMESTAMP",
        { "trigger": "current_timestamp(precision)", "contents": "current_timestamp(${1:precision})" },
        { "trigger": "date_part(subfield, timestamp)", "contents": "date_part(${1:subfield}, ${2:timestamp})" },
        { "trigger": "date_part(subfield, interval)", "contents": "date_part(${1:subfield}, ${2:interval})" },
        { "trigger": "date_trunc(subfield, timestamp)", "contents": "date_trunc(${1:subfield}, ${2:timestamp})" },
        { "trigger": "extract(subfield from timestamp)", "contents": "extract(${1:subfield} from ${2:timestamp})" },
        { "trigger": "extract(subfield from interval)", "contents": "extract(${1:subfield} from ${2:interval})" },
        { "trigger": "isfinite(date)", "contents": "isfinite(${1:date})" },
        { "trigger": "isfinite(timestamp)", "contents": "isfinite(${1:timestamp})" },
        { "trigger": "isfinite(interval)", "contents": "isfinite(${1:interval})" },
        { "trigger": "justify_days(interval)", "contents": "justify_days(${1:interval})" },
        { "trigger": "justify_hours(interval)", "contents": "justify_hours(${1:interval})" },
        { "trigger": "justify_interval(interval)", "contents": "justify_interval(${1:interval})" },
        "LOCALTIME",
        { "trigger": "localtime(precision)", "contents": "localtime(${1:precision})" },
        "LOCALTIMESTAMP",
        { "trigger": "localtimestamp(precision)", "contents": "localtimestamp(${1:precision})" },
        "now()",
        { "trigger": "pg_sleep(seconds)", "contents": "pg_sleep(${1:seconds})" },
        "statement_timestamp()",
        "timeofday()",
        "transaction_timestamp()",
// Enum Support Functions
        { "trigger": "enum_first(enum)", "contents": "enum_first(${1:enum})" },
        { "trigger": "enum_last(enum)", "contents": "enum_last(${1:enum})" },
        { "trigger": "enum_range(enum)", "contents": "enum_range(${1:enum})" },
        { "trigger": "enum_range(enum, enum)", "contents": "enum_range(${1:enum}, ${2:enum})" },
// Geometric Functions
        { "trigger": "area(object)", "contents": "area(${1:object})" },
        { "trigger": "center(object)", "contents": "center(${1:object})" },
        { "trigger": "diameter(circle)", "contents": "diameter(${1:circle})" },
        { "trigger": "height(box)", "contents": "height(${1:box})" },
        { "trigger": "isclosed(path)", "contents": "isclosed(${1:path})" },
        { "trigger": "isopen(path)", "contents": "isopen(${1:path})" },
        { "trigger": "length(object)", "contents": "length(${1:object})" },
        { "trigger": "npoints(path)", "contents": "npoints(${1:path})" },
        { "trigger": "npoints(polygon)", "contents": "npoints(${1:polygon})" },
        { "trigger": "pclose(path)", "contents": "pclose(${1:path})" },
        { "trigger": "popen(path)", "contents": "popen(${1:path})" },
        { "trigger": "radius(circle)", "contents": "radius(${1:circle})" },
        { "trigger": "width(box)", "contents": "width(${1:box})" },
// Geometric Type Conversion Functions
        { "trigger": "box(circle)", "contents": "box(${1:circle})" },
        { "trigger": "box(point, point)", "contents": "box(${1:point}, ${2:point})" },
        { "trigger": "box(polygon)", "contents": "box(${1:polygon})" },
        { "trigger": "circle(box)", "contents": "circle(${1:box})" },
        { "trigger": "circle(point, radius)", "contents": "circle(${1:point}, (${2:radius}))" },
        { "trigger": "circle(polygon)", "contents": "circle(${1:polygon})" },
        { "trigger": "lseg(box)", "contents": "lseg(${1:box})" },
        { "trigger": "lseg(point, point)", "contents": "lseg(${1:point}, ${2:point})" },
        { "trigger": "path(polygon)", "contents": "path(${1:polygon})" },
        { "trigger": "point(double, double)", "contents": "point(${1:double}, ${2:double})" },
        { "trigger": "point(box)", "contents": "point(${1:box})" },
        { "trigger": "point(circle)", "contents": "point(${1:circle})" },
        { "trigger": "point(lseg)", "contents": "point(${1:lseg})" },
        { "trigger": "point(polygon)", "contents": "point(${1:polygon})" },
        { "trigger": "polygon(box)", "contents": "polygon(${1:box})" },
        { "trigger": "polygon(circle)", "contents": "polygon(${1:circle})" },
        { "trigger": "polygon(npts, circle)", "contents": "polygon(${1:npts}, ${2:circle})" },
        { "trigger": "polygon(path)", "contents": "polygon(${1:path})" },
// Network Address Functions
        { "trigger": "abbrev(inet)", "contents": "abbrev(${1:inet})" },
        { "trigger": "abbrev(cidr)", "contents": "abbrev(${1:cidr})" },
        { "trigger": "broadcast(inet)", "contents": "broadcast(${1:inet})" },
        { "trigger": "family(inet)", "contents": "family(${1:inet})" },
        { "trigger": "host(inet)", "contents": "host(${1:inet})" },
        { "trigger": "hostmask(inet)", "contents": "hostmask(${1:inet})" },
        { "trigger": "masklen(inet)", "contents": "masklen(${1:inet})" },
        { "trigger": "netmask(inet)", "contents": "netmask(${1:inet})" },
        { "trigger": "network(inet)", "contents": "network(${1:inet})" },
        { "trigger": "set_masklen(inet, len)", "contents": "set_masklen(${1:inet}, ${2:len})" },
        { "trigger": "set_masklen(cidr, len)", "contents": "set_masklen(${1:cidr}, ${2:len})" },
        { "trigger": "text(inet)", "contents": "text(${1:inet})" },
        { "trigger": "trunc(macaddr)", "contents": "trunc(${1:macaddr})" },
// Text Search Functions
        "get_current_ts_config()",
        { "trigger": "length(tsvector)", "contents": "length(${1:tsvector})" },
        { "trigger": "numnode(tsquery)", "contents": "numnode(${1:tsquery})" },
        { "trigger": "plainto_tsquery(query)", "contents": "plainto_tsquery(${1:query})" },
        { "trigger": "plainto_tsquery(config, query)", "contents": "plainto_tsquery(${1:config}, ${2:query})" },
        { "trigger": "querytree(tsquery)", "contents": "querytree(${1:tsquery})" },
        { "trigger": "setweight(tsvector, char)", "contents": "setweight(${1:tsvector}, ${2:char})" },
        { "trigger": "strip(tsvector)", "contents": "strip(${1:tsvector})" },
        { "trigger": "to_tsquery(query)", "contents": "to_tsquery(${1:query})" },
        { "trigger": "to_tsquery(config, query)", "contents": "to_tsquery(${1:config}, ${2:query})" },
        { "trigger": "to_tsvector(document)", "contents": "to_tsvector(${1:document})" },
        { "trigger": "to_tsvector(config, document)", "contents": "to_tsvector(${1:config}, ${2:document})" },
        { "trigger": "ts_headline(document, query)", "contents": "ts_headline(${1:document}, ${2:query})" },
        { "trigger": "ts_headline(config, document, query)", "contents": "ts_headline(${1:config}, ${2:document}, ${3:query})" },
        { "trigger": "ts_headline(document, query, options)", "contents": "ts_headline(${1:document}, ${2:query}, ${3:options})" },
        { "trigger": "ts_headline(config, document, query, options)", "contents": "ts_headline(${1:config}, ${2:document}, ${3:query}, ${4:options})" },
        { "trigger": "ts_rank(vector, query)", "contents": "ts_rank(${1:vector}, {$2:query})" },
        { "trigger": "ts_rank(weights, vector, query)", "contents": "ts_rank(${1:weights}, ${2:vector}, {$3:query})" },
        { "trigger": "ts_rank(vector, query, normalization)", "contents": "ts_rank(${1:vector}, {$2:query}, ${3:normalization})" },
        { "trigger": "ts_rank(weights, vector, query, normalization)", "contents": "ts_rank(${1:weights}, ${2:vector}, {$3:query}, ${4:normalization})" },
        { "trigger": "ts_rank_cd(vector, query)", "contents": "ts_rank_cd(${1:vector}, {$2:query})" },
        { "trigger": "ts_rank_cd(weights, vector, query)", "contents": "ts_rank_cd(${1:weights}, ${2:vector}, {$3:query})" },
        { "trigger": "ts_rank_cd(vector, query, normalization)", "contents": "ts_rank_cd(${1:vector}, {$2:query}, ${3:normalization})" },
        { "trigger": "ts_rank_cd(weights, vector, query, normalization)", "contents": "ts_rank_cd(${1:weights}, ${2:vector}, {$3:query}, ${4:normalization})" },
        { "trigger": "ts_rewrite(query, target, substitute)", "contents": "ts_rewrite(${1:query}, ${2:target}, ${3:substitute})" },
        { "trigger": "ts_rewrite(query, select)", "contents": "ts_rewrite(${1:query}, ${2:select})" },
        "tsvector_update_trigger()",
        "tsvector_update_trigger_column()",
// Text Search Debugging Functions
        { "trigger": "ts_debug(document)", "contents": "ts_debug(${1:document})" },
        { "trigger": "ts_debug(config, document)", "contents": "ts_debug(${1:config}, ${2:document})" },
        { "trigger": "ts_lexize(dict, token)", "contents": "ts_lexize(${1:dict}, ${2:token})" },
        { "trigger": "ts_parse(parser, document)", "contents": "ts_parse(${1:parser}, ${2:document})" },
        { "trigger": "ts_token_type(parser)", "contents": "ts_token_type(${1:parser})" },
        { "trigger": "ts_stat(sqlquery)", "contents": "ts_stat(${1:sqlquery})" },
        { "trigger": "ts_stat(sqlquery, weights)", "contents": "ts_stat(${1:sqlquery}, ${2:weights})" },
// XML Functions
        { "trigger": "xmlcomment(text)", "contents": "xmlcomment(${1:text})" },
        { "trigger": "xmlconcat(xml, ...)", "contents": "xmlconcat(${1:xml}, ${2:xml})" },
        { "trigger": "xmlelement(name \"node\")", "contents": "xmlelement(name \"${1:node}\")" },
        { "trigger": "xmlelement(name \"node\", content, ...)", "contents": "xmlelement(name \"${1:node}\", ${2:content})" },
        { "trigger": "xmlforest(content AS \"node\", ...)", "contents": "xmlforest(${1:content} AS \"${2:node}\", ${3:content} AS \"${4:node}\")" },
        { "trigger": "xmlpi(name target)", "contents": "xmlpi(name ${1:target})" },
        { "trigger": "xmlpi(name target, content)", "contents": "xmlpi(name ${1:target}, ${2:content})" },
        { "trigger": "xmlroot(xml, version v)", "contents": "xmlroot(${1:xml}, version ${2:v})" },
        { "trigger": "xmlroot(xml, version no value)", "contents": "xmlroot(${1:xml}, version no value)" },
        { "trigger": "xmlroot(xml, version v, standalone b)", "contents": "xmlroot(${1:xml}, version ${2:v}, standalone ${3:b})" },
        { "trigger": "xmlroot(xml, version no value, standalone b)", "contents": "xmlroot(${1:xml}, version no value, standalone ${3:b})" },
        { "trigger": "xmlroot(xml, version v, standalone no value)", "contents": "xmlroot(${1:xml}, version ${2:v}, standalone no value)" },
        { "trigger": "xmlroot(xml, version no value, standalone no value)", "contents": "xmlroot(${1:xml}, version no value, standalone no value)" },
        { "trigger": "xmlagg(xml)", "contents": "xml(${1:xml})" },
        { "trigger": "xmlexists(text PASSING BY REF xml BY REF)", "contents": "xmlexists(${1:text} PASSING BY REF ${2:xml} BY REF)" },
        { "trigger": "xml_is_well_formed(text)", "contents": "xml_is_well_formed(${1:text})" },
        { "trigger": "xml_is_well_formed_document(text)", "contents": "xml_is_well_formed_document(${1:text})" },
        { "trigger": "xml_is_well_formed_content(text)", "contents": "xml_is_well_formed_content(${1:text})" },
        { "trigger": "xpath(xpath, xml)", "contents": "xpath(${1:xpath}, ${2:xml})" },
        { "trigger": "xpath(xpath, xml, nsarray)", "contents": "xpath(${1:xpath}, ${2:xml}, ${3:nsarray})" },
        { "trigger": "xpath_exists(xpath, xml)", "contents": "xpath_exists(${1:xpath}, ${2:xml})" },
        { "trigger": "xpath_exists(xpath, xml, nsarray)", "contents": "xpath_exists(${1:xpath}, ${2:xml}, ${3:nsarray})" },
        { "trigger": "cursor_to_xml(cursor, count, nulls, tableforest, targetns)", "contents": "cursor_to_xml(${1:cursor}, ${2:count}, ${3:nulls}, ${4:tableforest}, ${5:targetns})" },
        { "trigger": "cursor_to_xmlschema(cursor, nulls, tableforest, targetns)", "contents": "cursor_to_xmlschema(${1:cursor}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "query_to_xml(query, nulls, tableforest, targetns)", "contents": "query_to_xml(${1:query}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "query_to_xmlschema(query, nulls, tableforest, targetns)", "contents": "query_to_xmlschema(${1:query}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "query_to_and_xmlschema(query, nulls, tableforest, targetns)", "contents": "query_to_and_xmlschema(${1:query}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "table_to_xml(table, nulls, tableforest, targetns)", "contents": "table_to_xml(${1:table}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "table_to_xmlschema(table, nulls, tableforest, targetns)", "contents": "table_to_xmlschema(${1:table}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "table_to_and_xmlschema(table, nulls, tableforest, targetns)", "contents": "table_to_and_xmlschema(${1:table}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "schema_to_xml(schema, nulls, tableforest, targetns)", "contents": "schema_to_xml(${1:schema}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "schema_to_xmlschema(schema, nulls, tableforest, targetns)", "contents": "schema_to_xmlschema(${1:schema}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "schema_to_and_xmlschema(schema, nulls, tableforest, targetns)", "contents": "schema_to_and_xmlschema(${1:schema}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" },
        { "trigger": "database_to_xml(nulls, tableforest, targetns)", "contents": "database_to_xml(${1:nulls}, ${2:tableforest}, ${3:targetns})" },
        { "trigger": "database_to_xmlschema(nulls, tableforest, targetns)", "contents": "database_to_xmlschema(${1:nulls}, ${2:tableforest}, ${3:targetns})" },
        { "trigger": "database_to_and_xmlschema(nulls, tableforest, targetns)", "contents": "database_to_and_xmlschema(${1:nulls}, ${2:tableforest}, ${3:targetns})" },
// JSON Functions
        { "trigger": "array_to_json(array)", "contents": "array_to_json(${1:array})" },
        { "trigger": "array_to_json(array, pretty)", "contents": "array_to_json(${1:array}, ${2:pretty})" },
        { "trigger": "row_to_json(record)", "contents": "row_to_json(${1:record})" },
        { "trigger": "row_to_json(record, pretty)", "contents": "row_to_json(${1:record}, ${2:pretty})" },
// Sequence Functions
        { "trigger": "curval(sequence)", "contents": "curval(${1:sequence})" },
        "lastval()",
        { "trigger": "nextval(sequence)", "contents": "nextval(${1:sequence})" },
        { "trigger": "setval(sequence, value)", "contents": "setval(${1:sequence}, ${2:value})" },
        { "trigger": "setval(sequence, value, is_called)", "contents": "setval(${1:sequence}, ${2:value}, ${3:is_called})" },
// Array Functions
        { "trigger": "array_append(array, element)", "contents": "array_append(${1:array}, ${2:element})" },
        { "trigger": "array_cat(array, array2)", "contents": "array_cat(${1:array}, ${2:array2})" },
        { "trigger": "array_ndims(array)", "contents": "array_ndims(${1:array})" },
        { "trigger": "array_dims(array)", "contents": "array_dims(${1:array})" },
        { "trigger": "array_fill(element, dims, bounds)", "contents": "array_fill(${1:array}, ${2:dims}, ${3:bounds})" },
        { "trigger": "array_length(array, dimension)", "contents": "array_length(${1:array}, ${2:dimension})" },
        { "trigger": "array_lower(array, dimension)", "contents": "array_lower(${1:array}, ${2:dimension})" },
        { "trigger": "array_prepend(element, array)", "contents": "array_prepend(${1:element}, ${2:array})" },
        { "trigger": "array_to_string(array, delimiter)", "contents": "array_to_string(${1:array}, ${2:delimiter})" },
        { "trigger": "array_to_string(array, delimiter, nulltext)", "contents": "array_to_string(${1:array}, ${2:delimiter}, ${3:nulltext})" },
        { "trigger": "array_upper(array, dimension)", "contents": "array_upper(${1:array}, ${2:dimension})" },
        { "trigger": "string_to_array(string, delimiter)", "contents": "string_to_array(${1:string}, ${2:delimiter})" },
        { "trigger": "string_to_array(string, delimiter, nulltext)", "contents": "string_to_array(${1:string}, ${2:delimiter}, ${3:nulltext})" },
        { "trigger": "unnest(array)", "contents": "unnest(${1:array})" },
// Range Functions
        { "trigger": "lower(range)", "contents": "lower(${1:range})" },
        { "trigger": "upper(range)", "contents": "upper(${1:range})" },
        { "trigger": "isempty(range)", "contents": "isempty(${1:range})" },
        { "trigger": "lower_inc(range)", "contents": "lower_inc(${1:range})" },
        { "trigger": "upper_inc(range)", "contents": "upper_inc(${1:range})" },
        { "trigger": "lower_inf(range)", "contents": "lower_inf(${1:range})" },
        { "trigger": "upper_inf(range)", "contents": "upper_inf(${1:range})" },
// Aggregate Functions
        { "trigger": "array_agg(exp)", "contents": "array_agg(${1:expression})" },
        { "trigger": "avg(exp)", "contents": "avg(${1:expression})" },
        { "trigger": "bit_and(exp)", "contents": "bit_and(${1:expression})" },
        { "trigger": "bit_or(exp)", "contents": "bit_or(${1:expression})" },
        { "trigger": "bool_and(exp)", "contents": "bool_and(${1:expression})" },
        { "trigger": "bool_or(exp)", "contents": "bool_or(${1:expression})" },
        "count(*)",
        { "trigger": "count(exp)", "contents": "count(${1:expression})" },
        { "trigger": "every(exp)", "contents": "every(${1:expression})" },
        { "trigger": "max(exp)", "contents": "max(${1:expression})" },
        { "trigger": "min(exp)", "contents": "min(${1:expression})" },
        { "trigger": "string_agg(exp, delimiter)", "contents": "string_agg(${1:expression}, ${2:delimiter})" },
        { "trigger": "sum(exp)", "contents": "sum(${1:expression})" },
// Aggregate Functions for Statistics
        { "trigger": "corr(y, x)", "contents": "corr(${1:y}, ${2:x})" },
        { "trigger": "covar_pop(y, x)", "contents": "covar_pop(${1:y}, ${2:x})" },
        { "trigger": "covar_samp(y, x)", "contents": "covar_samp(${1:y}, ${2:x})" },
        { "trigger": "regr_avgx(y, x)", "contents": "regr_avgx(${1:y}, ${2:x})" },
        { "trigger": "regr_avgy(y, x)", "contents": "regr_avgy(${1:y}, ${2:x})" },
        { "trigger": "regr_count(y, x)", "contents": "regr_count(${1:y}, ${2:x})" },
        { "trigger": "regr_intercept(y, x)", "contents": "regr_intercept(${1:y}, ${2:x})" },
        { "trigger": "regr_r2(y, x)", "contents": "regr_r2" },
        { "trigger": "regr_slope(y, x)", "contents": "regr_slope(${1:y}, ${2:x})" },
        { "trigger": "regr_sxx(y, x)", "contents": "regr_sxx(${1:y}, ${2:x})" },
        { "trigger": "regr_sxy(y, x)", "contents": "regr_sxy(${1:y}, ${2:x})" },
        { "trigger": "regr_syy(y, x)", "contents": "regr_syy(${1:y}, ${2:x})" },
        { "trigger": "stddev(exp)", "contents": "stddev(${1:expression})" },
        { "trigger": "stddev_pop(exp)", "contents": "stddev_pop(${1:expression})" },
        { "trigger": "stddev_samp(exp)", "contents": "stddev_samp(${1:expression})" },
        { "trigger": "variance(exp)", "contents": "variance(${1:expression})" },
        { "trigger": "var_pop(exp)", "contents": "var_pop(${1:expression})" },
        { "trigger": "var_samp(exp)", "contents": "var_samp(${1:expression})" },
// General-Purpose Window Functions
        "row_number()",
        "rank()",
        "dense_rank()",
        "percent_rank()",
        "cume_dist()",
        { "trigger": "ntile(num_buckets)", "contents": "ntile(${1:num_buckets})" },
        { "trigger": "lag(value)", "contents": "lag(${1:value})" },
        { "trigger": "lag(value, offset)", "contents": "lag(${1:value}, ${2:offset})" },
        { "trigger": "lag(value, offset, default)", "contents": "lag(${1:value}, ${2:offset}, ${3:default})" },
        { "trigger": "lead(value)", "contents": "lead(${1:value})" },
        { "trigger": "lead(value, offset)", "contents": "lead(${1:value}, ${2:offset})" },
        { "trigger": "lead(value, offset, default)", "contents": "lead(${1:value}, ${2:offset}, ${3:default})" },
        { "trigger": "first_value(value)", "contents": "first_value(${1:value})" },
        { "trigger": "last_value(value)", "contents": "last_value(${1:value})" },
        { "trigger": "nth_value(value, n)", "contents": "nth_value(${1:value}, ${2:n})" },
// Set Returning Functions
        { "trigger": "generate_series(start, stop)", "contents": "generate_series(${1:start}, ${2:stop})" },
        { "trigger": "generate_series(start, stop, step)", "contents": "generate_series(${1:start}, ${2:stop}, ${3:step})" },
        { "trigger": "generate_subscripts(arry, dim)", "contents": "generate_subscripts(${1:array}, ${2:dim})" },
        { "trigger": "generate_subscripts(arry, dim, reverse)", "contents": "generate_subscripts(${1:array}, ${2:dim}, ${3:reverse})" },
// System Information Functions
        "current_catalog",
        "current_database()",
        "current_query()",
        "current_schema()",
        { "trigger": "current_schemas(addimplicit)", "contents": "current_schemas(${1:addimplicit})" },
        "current_user",
        "inet_client_addr()",
        "inet_client_port()",
        "inet_server_addr()",
        "inet_server_port()",
        "pg_backend_pid()",
        "pg_conf_load_time()",
        { "trigger": "pg_is_other_temp_schema(old)", "contents": "pg_is_other_temp_schema(${1:old})" },
        "pg_listening_channels()",
        "pg_my_temp_schema()",
        "pg_postmaster_start_time()",
        "pg_trigger_depth",
        "session_user",
        "user",
        "version()",
// Access Privilege Inquiry Functions
        { "trigger": "has_any_column_privilege(table, privilege)", "contents": "has_any_column_privilege(${1:table}, ${2:privilege})" },
        { "trigger": "has_any_column_privilege(user, table, privilege)", "contents": "has_any_column_privilege(${1:user}, ${2:table}, ${3:privilege})" },
        { "trigger": "has_column_privilege(table, column, privilege)", "contents": "has_column_privilege(${1:table}, ${2:column}, ${3:privilege})" },
        { "trigger": "has_column_privilege(user, table, column, privilege)", "contents": "has_column_privilege(${1:user}, ${2:table}, ${3:column}, ${4:privilege})" },
        { "trigger": "has_database_privilege(database, privilege)", "contents": "has_database_privilege(${1:database}, ${2:privilege})" },
        { "trigger": "has_database_privilege(user, database, privilege)", "contents": "has_database_privilege(${1:user}, ${2:database}, ${3:privilege})" },
        { "trigger": "has_foreign_data_wrapper_privilege(fdw, privilege)", "contents": "has_foreign_data_wrapper_privilege(${1:fdw}, ${2:privilege})" },
        { "trigger": "has_foreign_data_wrapper_privilege(user, fdw, privilege)", "contents": "has_foreign_data_wrapper_privilege(${1:user}, ${2:fdw}, ${3:privilege})" },
        { "trigger": "has_function_privilege(function, privilege)", "contents": "has_function_privilege(${1:function}, ${2:privilege})" },
        { "trigger": "has_function_privilege(user, function, privilege)", "contents": "has_function_privilege(${1:user}, ${2:function}, ${3:privilege})" },
        { "trigger": "has_language_privilege(language, privilege)", "contents": "has_language_privilege(${1:language}, ${2:privilege})" },
        { "trigger": "has_language_privilege(user, language, privilege)", "contents": "has_language_privilege(${1:user}, ${2:language}, ${3:privilege})" },
        { "trigger": "has_schema_privilege(schema, privilege)", "contents": "has_schema_privilege(${1:schema}, ${2:privilege})" },
        { "trigger": "has_schema_privilege(user, schema, privilege)", "contents": "has_schema_privilege(${1:user}, ${2:schema}, ${3:privilege})" },
        { "trigger": "has_sequence_privilege(sequence, privilege)", "contents": "has_sequence_privilege(${1:sequence}, ${2:privilege})" },
        { "trigger": "has_sequence_privilege(user, sequence, privilege)", "contents": "has_sequence_privilege(${1:user}, ${2:sequence}, ${3:privilege})" },
        { "trigger": "has_server_privilege(server, privilege)", "contents": "has_server_privilege(${1:server}, ${2:privilege})" },
        { "trigger": "has_server_privilege(user, server, privilege)", "contents": "has_server_privilege(${1:user}, ${2:server}, ${3:privilege})" },
        { "trigger": "has_table_privilege(table, privilege)", "contents": "has_table_privilege(${1:table}, ${2:privilege})" },
        { "trigger": "has_table_privilege(user, table, privilege)", "contents": "has_table_privilege(${1:user}, ${2:table}, ${3:privilege})" },
        { "trigger": "has_tablespace_privilege(tablespace, privilege)", "contents": "has_tablespace_privilege(${1:tablespace}, ${2:privilege})" },
        { "trigger": "has_tablespace_privilege(user, tablespace, privilege)", "contents": "has_tablespace_privilege(${1:user}, ${2:tablespace}, ${3:privilege})" },
        { "trigger": "pg_has_role(role, privilege)", "contents": "pg_has_role(${1:role}, ${2:privilege})" },
        { "trigger": "pg_has_role(user, role, privilege)", "contents": "pg_has_role(${1:user}, ${2:role}, ${3:privilege})" },
// Schema Visibility Inquiry Functions
        { "trigger": "pg_collation_is_visible(oid)", "contents": "pg_collation_is_visible(${1:oid})" },
        { "trigger": "pg_conversion_is_visible(oid)", "contents": "pg_conversion_is_visible(${1:oid})" },
        { "trigger": "pg_function_is_visible(oid)", "contents": "pg_function_is_visible(${1:oid})" },
        { "trigger": "pg_opclass_is_visible(oid)", "contents": "pg_opclass_is_visible(${1:oid})" },
        { "trigger": "pg_opfamily_is_visible(oid)", "contents": "pg_opfamily_is_visible(${1:oid})" },
        { "trigger": "pg_table_is_visible(oid)", "contents": "pg_table_is_visible(${1:oid})" },
        { "trigger": "pg_ts_config_is_visible(oid)", "contents": "pg_ts_config_is_visible(${1:oid})" },
        { "trigger": "pg_ts_dict_is_visible(oid)", "contents": "pg_ts_dict_is_visible(${1:oid})" },
        { "trigger": "pg_ts_parser_is_visible(oid)", "contents": "pg_ts_parser_is_visible(${1:oid})" },
        { "trigger": "pg_ts_template_is_visible(oid)", "contents": "pg_ts_template_is_visible(${1:oid})" },
        { "trigger": "pg_type_is_visible(oid)", "contents": "pg_type_is_visible(${1:oid})" },
// System Catalog Information Functions
        { "trigger": "format_type(oid, typemod)", "contents": "format_type(${1:oid}, ${2:typemod})" },
        { "trigger": "pg_describe_object(catalog_id, object_id, object_sub_id)", "contents": "pg_describe_object(${1:catalog_id}, ${2:object_id}, ${3:object_sub_id})" },
        { "trigger": "pg_constraintdef(oid)", "contents": "pg_constraintdef(${1:oid})" },
        { "trigger": "pg_constraintdef(oid, pretty)", "contents": "pg_constraintdef(${1:oid}, ${2:pretty})" },
        { "trigger": "pg_get_expr(pg_node_tree, oid)", "contents": "pg_get_expr(${1:pg_node_tree}, ${2:oid})" },
        { "trigger": "pg_get_expr(pg_node_tree, oid, pretty)", "contents": "pg_get_expr(${1:pg_node_tree}, ${2:oid}, ${3:pretty})" },
        { "trigger": "pg_get_functiondef(oid)", "contents": "pg_get_functiondef(${1:oid})" },
        { "trigger": "pg_get_function_arguments(oid)", "contents": "pg_get_function_arguments(${1:oid})" },
        { "trigger": "pg_get_function_identity_arguments(oid)", "contents": "pg_get_function_identity_arguments(${1:oid})" },
        { "trigger": "pg_get_function_result(oid)", "contents": "pg_get_function_result(${1:oid})" },
        { "trigger": "pg_get_indexdef(oid)", "contents": "pg_get_indexdef(${1:oid})" },
        { "trigger": "pg_get_indexdef(oid, column_no, pretty)", "contents": "pg_get_indexdef(${1:oid}, ${2:column_no}, ${3:pretty})" },
        "pg_get_keywords()",
        { "trigger": "pg_get_ruledef(oid)", "contents": "pg_get_ruledef(${1:oid})" },
        { "trigger": "pg_get_ruledef(oid, pretty)", "contents": "pg_get_ruledef(${1:oid}, ${2:pretty})" },
        { "trigger": "pg_get_serial_sequence(table, column)", "contents": "pg_get_serial_sequence(${1:table}, ${2:column})" },
        { "trigger": "pg_get_triggerdef(oid)", "contents": "pg_get_triggerdef(${1:oid})" },
        { "trigger": "pg_get_triggerdef(oid, pretty)", "contents": "pg_get_triggerdef(${1:oid}, ${2:pretty})" },
        { "trigger": "pg_get_userbyid(oid)", "contents": "pg_get_userbyid(${1:oid})" },
        { "trigger": "pg_get_viewdef(name)", "contents": "pg_get_viewdef(${1:name})" },
        { "trigger": "pg_get_viewdef(name, pretty)", "contents": "pg_get_viewdef(${1:name}, ${2:pretty})" },
        { "trigger": "pg_get_viewdef(oid)", "contents": "pg_get_viewdef(${1:oid})" },
        { "trigger": "pg_get_viewdef(oid, pretty)", "contents": "pg_get_viewdef(${1:oid}, ${2:pretty})" },
        { "trigger": "pg_get_viewdef(oid, wrap_column)", "contents": "pg_get_viewdef(${1:oid}, ${2:wrap_column})" },
        { "trigger": "pg_options_to_table(reloptions)", "contents": "pg_options_to_table(${1:reloptions})" },
        { "trigger": "pg_tablespace_databases(oid)", "contents": "pg_tablespace_databases(${1:oid})" },
        { "trigger": "pg_tablespace_location(oid)", "contents": "pg_tablespace_location(${1:oid})" },
        { "trigger": "pg_typeof(value)", "contents": "pg_typeof(${1:value})" },
        { "trigger": "collation for (value)", "contents": "collation for (${1:value})" },
        { "trigger": "col_description(table_oid, column_no)", "contents": "col_description(${1:table_oid}, ${2:column_no})" },
        { "trigger": "obj_description(oid, catalog_name)", "contents": "obj_description(${1:oid}, ${2:catalog_name})" },
        { "trigger": "obj_description(oid)", "contents": "obj_description(${1:oid})" },
        { "trigger": "shobj_description(oid, catalog_name)", "contents": "shobj_description(${1:oid}, ${2:catalog_name})" },
// Transaction IDs and Snapshots
        "txid_current()",
        "txid_current_snapshot()",
        { "trigger": "txid_snapshot_xip(txid_snapshot)", "contents": "txid_snapshot_xip(${1:txid_snapshot})" },
        { "trigger": "txid_snapshot_xmax(txid_snapshot)", "contents": "txid_snapshot_xmax(${1:txid_snapshot})" },
        { "trigger": "txid_snapshot_xmin(txid_snapshot)", "contents": "txid_snapshot_xmin(${1:txid_snapshot})" },
        { "trigger": "txid_visible_in_snapshot(txid, txid_snapshot)", "contents": "txid_visible_in_snapshot(${1:txid}, ${2:txid_snapshot})" },
// Configuration Setting Functions
        { "trigger": "curent_setting(name)", "contents": "currrent_setting(${1:name})" },
        { "trigger": "set_config(name, value, is_local)", "contents": "set_config(${1:name}, ${2:value}, ${3:is_local})" },
// Server Signalling Functions
        { "trigger": "pg_cancel_backend(pid)", "contents": "pg_cancel_backend(${1:pid})" },
        "pg_reload_conf()",
        "pg_rotate_logfile()",
        { "trigger": "pg_terminate_backend(pid)", "contents": "pg_terminate_backend(${1:pid})" },
// Backup Contorl Functions
        { "trigger": "pg_create_restore_point(name)", "contents": "pg_create_restore_point(${1:name})" },
        "pg_current_xlog_insert_location()",
        "pg_current_xlog_location()",
        { "trigger": "pg_start_backup(label)", "contents": "pg_start_backup(${1:label})" },
        { "trigger": "pg_start_backup(label, fast)", "contents": "pg_start_backup(${1:label}, ${2:fast})" },
        "pg_stop_backup()",
        "pg_switch_xlog()",
        { "trigger": "pg_xlogfile_name(location)", "contents": "pg_xlogfile_name(${1:location})" },
        { "trigger": "pg_xlogfile_name_offset(location)", "contents": "pg_xlogfile_name_offset(${1:location})" },
        { "trigger": "pg_xlogfile_name_diff(location, location)", "contents": "pg_xlogfile_name_diff(${1:location}, ${2:location})" },
// Recovery Control Functions
        "pg_is_in_recovery()",
        "pg_last_xlog_receive_location()",
        "pg_last_xlog_replay_location()",
        "pg_last_xact_replay_timestamp()",
        "pg_is_xlog_replay_paused()",
        "pg_xlog_replay_pause()",
        "pg_xlog_replay_resume()",
// Snapshot Synchronization Functions
        "pg_export_snapshot()",
// Database Object Management Functions
        { "trigger": "pg_column_size(value)", "contents": "pg_column_size(${1:value})" },
        { "trigger": "pg_database_size(oid)", "contents": "pg_database_size(${1:oid})" },
        { "trigger": "pg_database_size(name)", "contents": "pg_database_size(${1:name})" },
        { "trigger": "pg_indexes_size(index)", "contents": "pg_indexes_size(${1:index})" },
        { "trigger": "pg_relation_size(name)", "contents": "pg_relation_size(${1:name})" },
        { "trigger": "pg_relation_size(name, fork)", "contents": "pg_relation_size(${1:name}, ${2:fork})" },
        { "trigger": "pg_size_pretty(bytes)", "contents": "pg_size_pretty(${1:bytes})" },
        { "trigger": "pg_table_size(name)", "contents": "pg_table_size(${1:name})" },
        { "trigger": "pg_tablespace_size(oid)", "contents": "pg_tablespace_size(${1:oid})" },
        { "trigger": "pg_tablespace_size(name)", "contents": "pg_tablespace_size(${1:name})" },
        { "trigger": "pg_total_relation_size(name)", "contents": "pg_total_relation_size(${1:name})" },
// Database Object Location Functions
        { "trigger": "pg_relation_filenode(name)", "contents": "pg_relation_filenode(${1:name})" },
        { "trigger": "pg_relation_filepath(name)", "contents": "pg_relation_filepath(${1:name})" },
// Generic File Access Functions
        { "trigger": "pg_ls_dir(dirname)", "contents": "pg_ls_dir(${1:dirname})" },
        { "trigger": "pg_read_file(filename)", "contents": "pg_read_file(${1:filename})" },
        { "trigger": "pg_read_file(filename, offset, length)", "contents": "pg_read_file(${1:filename}, ${2:offset}, ${3:length})" },
        { "trigger": "pg_read_binary_file(filename)", "contents": "pg_read_binary_file(${1:filename})" },
        { "trigger": "pg_read_binary_file(filename, offset, length)", "contents": "pg_read_binary_file(${1:filename}, ${2:offset}, ${3:length})" },
        { "trigger": "pg_stat_file(filename)", "contents": "pg_stat_file(${1:filename})" },
// Advisory Lock Functions
        { "trigger": "pg_advisory_lock(key)", "contents": "pg_advisory_lock(${1:key})" },
        { "trigger": "pg_advisory_lock(key1, key2)", "contents": "pg_advisory_lock(${1:key1}, ${2:key2})" },
        { "trigger": "pg_advisory_lock_shared(key)", "contents": "pg_advisory_lock_shared(${1:key})" },
        { "trigger": "pg_advisory_lock_shared(key1, key2)", "contents": "pg_advisory_lock_shared(${1:key1}, ${2:key2})" },
        { "trigger": "pg_advisory_unlock(key)", "contents": "pg_advisory_unlock(${1:key})" },
        { "trigger": "pg_advisory_unlock(key1, key2)", "contents": "pg_advisory_unlock(${1:key1}, ${2:key2})" },
        "pg_advisory_unlock_all()",
        { "trigger": "pg_advisory_unlock_shared(key)", "contents": "pg_advisory_unlock_shared(${1:key})" },
        { "trigger": "pg_advisory_unlock_shared(key1, key2)", "contents": "pg_advisory_unlock_shared(${1:key1}, ${2:key2})" },
        { "trigger": "pg_advisory_xact_lock(key)", "contents": "pg_advisory_xact_lock(${1:key})" },
        { "trigger": "pg_advisory_xact_lock(key1, key2)", "contents": "pg_advisory_xact_lock(${1:key1}, ${2:key2})" },
        { "trigger": "pg_advisory_xact_lock_shared(key)", "contents": "pg_advisory_xact_lock_shared(${1:key})" },
        { "trigger": "pg_advisory_xact_lock_shared(key1, key2)", "contents": "pg_advisory_xact_lock_shared(${1:key1}, ${2:key2})" },
        { "trigger": "pg_try_advisory_lock(key)", "contents": "pg_try_advisory_lock(${1:key})" },
        { "trigger": "pg_try_advisory_lock(key1, key2)", "contents": "pg_try_advisory_lock(${1:key1}, ${2:key2})" },
        { "trigger": "pg_try_advisory_lock_shared(key)", "contents": "pg_try_advisory_lock_shared(${1:key})" },
        { "trigger": "pg_try_advisory_lock_shared(key1, key2)", "contents": "pg_try_advisory_lock_shared(${1:key1}, ${2:key2})" },
        { "trigger": "pg_try_advisory_xact_lock(key)", "contents": "pg_try_advisory_xact_lock(${1:key})" },
        { "trigger": "pg_try_advisory_xact_lock(key1, key2)", "contents": "pg_try_advisory_xact_lock(${1:key1}, ${2:key2})" },
        { "trigger": "pg_try_advisory_xact_lock_shared(key)", "contents": "pg_try_advisory_xact_lock_shared(${1:key})" },
        { "trigger": "pg_try_advisory_xact_lock_shared(key1, key2)", "contents": "pg_try_advisory_xact_lock_shared(${1:key1}, ${2:key2})" }
        // { "trigger": "", "contents": "" },
    ]
}
